name: Build and Release PyCrucible (native)

on:
  push:
    tags:
      - "v*.*.*"
    branches: [main]
  release:
    types: [created]

permissions:
  contents: write

jobs:
  test:
    name: Run Tests (linux/x64)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build ${{ matrix.target }}
    if: github.event_name == 'release'
    needs: test
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ----- Linux -----
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_ext: ""
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            bin_ext: ""
          # ----- Windows -----
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            bin_ext: ".exe"
          - runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            bin_ext: ".exe"
          # ----- macOS -----
          - runner: macos-13
            target: x86_64-apple-darwin
            bin_ext: ""
          - runner: macos-14
            target: aarch64-apple-darwin
            bin_ext: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          BIN_NAME=pycrucible${{ matrix.bin_ext }}
          OUT_NAME=pycrucible_${VERSION}_${{ matrix.target }}${{ matrix.bin_ext }}
          cp target/${{ matrix.target }}/release/$BIN_NAME $OUT_NAME
          echo "OUT_NAME=$OUT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUT_NAME }}
          path: ${{ env.OUT_NAME }}

  run_test_app:
    name: Smoke Test PyCrucible
    if: github.event_name == 'release'
    needs: build
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ----- Linux -----
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_ext: ""
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            bin_ext: ""
          # ----- Windows -----
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            bin_ext: ".exe"
          - runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            bin_ext: ".exe"
          # ----- macOS -----
          - runner: macos-13
            target: x86_64-apple-darwin
            bin_ext: ""
          - runner: macos-14
            target: aarch64-apple-darwin
            bin_ext: ""

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Clone example project
        run: git clone https://github.com/JamesParrott/simple-python-project-for-PyCrucible

      - name: Copy PyCrucible binary into example project
        shell: bash
        run: cp ./pycrucible_*/* simple-python-project-for-PyCrucible

      - name: Make binary executable (linux)
        if: runner.os != 'Windows'
        run: chmod +x simple-python-project-for-PyCrucible/pycrucible_*

      - name: Run PyCrucible
        working-directory: simple-python-project-for-PyCrucible
        run: |
          ./pycrucible_${{ github.ref_name }}_${{ matrix.target }}${{ matrix.bin_ext }} -e . -o cowsay${{ matrix.bin_ext }} --debug

      - name: Smoke-test generated artifact
        working-directory: simple-python-project-for-PyCrucible
        run: ./cowsay${{ matrix.bin_ext }}
  
  build_sdist:
    name: Build sdist for PyPI
    if: github.event_name == 'release'
    needs: [build, run_test_app]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Build sdist
        run: |
          maturin sdist --out dist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz


  build_wheels:
    name: Build wheels for PyPI
    if: github.event_name == 'release'
    needs: [build, run_test_app]
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
          - runner: macos-13
            target: x86_64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Install patchelf (Linux only)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y patchelf

      - name: Build wheel
        run: |
          maturin build --release --out dist --target ${{ matrix.target }}

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.target }}
          path: dist/*.whl

    
  
  release_to_pypi:
    name: Upload release to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build_sdist, build_wheels]

    environment:
      name: pypi
      url: https://pypi.org/p/pycrucible/
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: Remove non-PyPI files
        run: |
          find dist -type f ! -name "*.whl" ! -name "*.tar.gz" -delete

      - name: List files
        run: ls -R dist
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: dist/
        continue-on-error: false


  release_to_gh:
    name: Publish Release to GitHub
    if: github.event_name == 'release'
    needs: [build, run_test_app]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/pycrucible_*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
